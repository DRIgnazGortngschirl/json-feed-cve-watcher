#!/bin/bash

VENDOR_ID=$(grep -w VENDOR_ID config.conf | sed 's/VENDOR_ID=//g' | awk '{print $1}')
FEED_CHECK_INTERVAL=$(grep -w FEED_CHECK_INTERVAL config.conf | sed 's/FEED_CHECK_INTERVAL=//g' | awk '{print $1}')
LOW_VULNERABILITY_SCORE=$(grep -w LOW_VULNERABILITY_SCORE config.conf | sed 's/LOW_VULNERABILITY_SCORE=//g' | awk '{print $1}')
MEDIUM_VULNERABILITY_SCORE=$(grep -w MEDIUM_VULNERABILITY_SCORE config.conf | sed 's/MEDIUM_VULNERABILITY_SCORE=//g' | awk '{print $1}')
HIGH_VULNERABILITY_SCORE=$(grep -w HIGH_VULNERABILITY_SCORE config.conf | sed 's/HIGH_VULNERABILITY_SCORE=//g' | awk '{print $1}')
VERY_HIGH_VULNERABILITY_SCORE=$(grep -w VERY_HIGH_VULNERABILITY_SCORE config.conf | sed 's/VERY_HIGH_VULNERABILITY_SCORE=//g' | awk '{print $1}')
LOW_VULNERABILITY_TEXT=$(grep -w LOW_VULNERABILITY_TEXT config.conf | sed 's/LOW_VULNERABILITY_TEXT=//g' | sed -n '/"/,/"/ p' | sed 's/"//g')
MEDIUM_VULNERABILITY_TEXT=$(grep -w MEDIUM_VULNERABILITY_TEXT config.conf | sed 's/MEDIUM_VULNERABILITY_TEXT=//g' | sed -n '/"/,/"/ p' | sed 's/"//g')
HIGH_VULNERABILITY_TEXT=$(grep -w HIGH_VULNERABILITY_TEXT config.conf | sed 's/HIGH_VULNERABILITY_TEXT=//g' | sed -n '/"/,/"/ p' | sed 's/"//g')
VERY_HIGH_VULNERABILITY_TEXT=$(grep -w VERY_HIGH_VULNERABILITY_TEXT config.conf | sed 's/VERY_HIGH_VULNERABILITY_TEXT=//g' | sed -n '/"/,/"/ p' | sed 's/"//g')

SHA1OLD=0 # Set firts time run state
while true; do
    # Wget feed
    wget -q "https://www.cvedetails.com/json-feed.php?numrows=10&vendor_id=$VENDOR_ID&product_id=0&version_id=0&hasexp=0&opec=0&opov=0&opcsrf=0&opfileinc=0&opgpriv=0&opsqli=0&opxss=0&opdirt=0&opmemc=0&ophttprs=0&opbyp=0&opginf=0&opdos=0&orderby=3&cvssscoremin=0" -O wget # Wget the feed
    sleep 2                                                                                                                                                                                                                                                                 # Wait for download to complete (increase sleep if error is "wget Trash. Waiting for next check")
    if [[ $(find wget -type f -size +100c 2>/dev/null) ]]; then                                                                                                                                                                                                                                               # Check if wget was successful
        SHA1NEW=$(sha1sum wget | awk '{print $1}')                                                                                                                                                                                                                          # Set with sha1sum the current hash value
        if [ "$SHA1NEW" = "$SHA1OLD" ]; then                                                                                                                                                                                                                                # Compare if the hashes have changed (Check if a new CVE exists)
            SHA1OLD=$SHA1NEW                                                                                                                                                                                                                                                # Set new SHA1 sum as old SHA1 sum
            rm wget*                                                                                                                                                                                                                                                        # Remove all existing feeds in directory
            sleep $FEED_CHECK_INTERVAL                                                                                                                                                                                                                                      # Wait time between rechecks
        else                                                                                                                                                                                                                                                                # Different hash value (New CVE found)
            if [ "$SHA1OLD" -eq 0 ]; then                                                                                                                                                                                                                                   # Check for first time run
                echo "$(date) # [i]: Everyone has their first time (First launch)"                                                                                                                                                                                          # First time run hmmm ?
                SHA1OLD=$SHA1NEW                                                                                                                                                                                                                                            # Remove first time run state
            else                                                                                                                                                                                                                                                            # Not first run
                echo "$(date) # [i]: New Entry (Hash changed)"                                                                                                                                                                                                              # OMG not another one ;)
                SHA1OLD=$SHA1NEW                                                                                                                                                                                                                                            # Set new SHA1 sum as old SHA1 sum
                cat wget | python -m json.tool >formated                                                                                                                                                                                                                    # Format feed
                awk '/"cve_id"/{i++}i==1' formated >CVE                                                                                                                                                                                                                     # Use only most recent entry (top entry)
                rm formated                                                                                                                                                                                                                                                 # Remove not needed file
                CVEID=$(grep cve_id CVE | sed 's/"cve_id": "//g' | sed 's/",//g' | sed -e 's/^[[:space:]]*//')                                                                                                                                                              # Get CVEID
                CVSSSCORE=$(grep cvss_score CVE | sed 's/"cvss_score": "//g' | sed 's/",//g' | sed -e 's/^[[:space:]]*//')                                                                                                                                                  # Get CVSSSCORE
                if (($(echo "$CVSSSCORE > 0" | bc -l))); then
                    CVSSSCOREMSG="$CVSSSCORE None Vulnerability"
                    if (($(echo "$CVSSSCORE > $LOW_VULNERABILITY_SCORE" | bc -l))); then
                        CVSSSCOREMSG="$CVSSSCORE $LOW_VULNERABILITY_TEXT"
                        if (($(echo "$CVSSSCORE > $MEDIUM_VULNERABILITY_SCORE" | bc -l))); then
                            CVSSSCOREMSG="$CVSSSCORE $MEDIUM_VULNERABILITY_TEXT"
                            if (($(echo "$CVSSSCORE > $HIGH_VULNERABILITY_SCORE" | bc -l))); then
                                CVSSSCOREMSG="$CVSSSCORE $HIGH_VULNERABILITY_TEXT "
                                if (($(echo "$CVSSSCORE > $VERY_HIGH_VULNERABILITY_SCORE" | bc -l))); then
                                    CVSSSCOREMSG="$CVSSSCORE $VERY_HIGH_VULNERABILITY_TEXT"
                                fi
                            fi
                        fi
                    fi
                fi
                PUBLISHDATE=$(grep publish_date CVE | sed 's/"publish_date": "//g' | sed 's/",//g' | sed -e 's/^[[:space:]]*//') # Get PUBLISHDATE
                SUMMARY=$(grep summary CVE | sed 's/"summary": "//g' | sed 's/",//g' | sed -e 's/^[[:space:]]*//')               # Get SUMMARY
                URL=$(grep url CVE | sed 's/"url": "//g' | sed 's/"//g' | sed -e 's/^[[:space:]]*//')                            # Get URL
                rm CVE                                                                                                           # Remove not needed file
                EXIST=$(grep $CVEID CVEs-list.txt)
                if [ -z "$EXIST" ]; then
                    echo "$CVEID, $CVSSSCORE, $PUBLISHDATE, $SUMMARY, $URL" >>CVEs-list.txt # Sent new CVE to CVE-list.txt
                    printf "##### $CVEID ##### \nSCORE: $CVSSSCOREMSG\nPUBLISH DATE: $PUBLISHDATE\nDESCRIPTION: \n$SUMMARY\n\n $URL" | telegram-send --stdin # Sent new CVE via Telegram
                    echo "$(date) # [i]: Notification sent!"
                else
                    echo "$(date) # [i]: $CVEID already in list"
                fi
            fi
        fi
    else
        echo "[error]: wget Trash. Waiting for next check" # Wget was trash (No downlaoded feed in time. Update "Wait for download to complete")
    fi
done
